// <auto-generated />

using System;
using GdscBackend.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace GdscBackend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    internal class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("GdscBackend.Auth.Role", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("text");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("text");

                b.Property<string>("Name")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.Property<string>("NormalizedName")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.HasKey("Id");

                b.HasIndex("NormalizedName")
                    .IsUnique()
                    .HasDatabaseName("RoleNameIndex");

                b.ToTable("AspNetRoles");
            });

            modelBuilder.Entity("GdscBackend.Auth.User", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("text");

                b.Property<int>("AccessFailedCount")
                    .HasColumnType("integer");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("text");

                b.Property<string>("Email")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.Property<bool>("EmailConfirmed")
                    .HasColumnType("boolean");

                b.Property<bool>("LockoutEnabled")
                    .HasColumnType("boolean");

                b.Property<DateTimeOffset?>("LockoutEnd")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("NormalizedEmail")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.Property<string>("NormalizedUserName")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.Property<string>("PasswordHash")
                    .HasColumnType("text");

                b.Property<string>("PhoneNumber")
                    .HasColumnType("text");

                b.Property<bool>("PhoneNumberConfirmed")
                    .HasColumnType("boolean");

                b.Property<string>("SecurityStamp")
                    .HasColumnType("text");

                b.Property<bool>("TwoFactorEnabled")
                    .HasColumnType("boolean");

                b.Property<string>("UserName")
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.HasKey("Id");

                b.HasIndex("NormalizedEmail")
                    .HasDatabaseName("EmailIndex");

                b.HasIndex("NormalizedUserName")
                    .IsUnique()
                    .HasDatabaseName("UserNameIndex");

                b.ToTable("AspNetUsers");
            });

            modelBuilder.Entity("GdscBackend.Models.ContactModel", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("text");

                b.Property<DateTime>("Created")
                    .HasColumnType("timestamp without time zone");

                b.Property<string>("Email")
                    .HasColumnType("text");

                b.Property<string>("Name")
                    .HasColumnType("text");

                b.Property<string>("Subject")
                    .HasColumnType("text");

                b.Property<string>("Text")
                    .HasColumnType("text");

                b.Property<DateTime>("Updated")
                    .HasColumnType("timestamp without time zone");

                b.HasKey("Id");

                b.ToTable("Contacts");
            });

            modelBuilder.Entity("GdscBackend.Models.EventModel", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("text");

                b.Property<DateTime>("Created")
                    .HasColumnType("timestamp without time zone");

                b.Property<string>("Description")
                    .HasColumnType("text");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ImageId")
                        .HasColumnType("text");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                b.Property<DateTime>("Updated")
                    .HasColumnType("timestamp without time zone");

                b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("GdscBackend.Models.ExampleModel", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("text");

                b.Property<DateTime>("Created")
                    .HasColumnType("timestamp without time zone");

                b.Property<int>("Number")
                    .HasColumnType("integer");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<int>("Type")
                    .HasColumnType("integer");

                b.Property<DateTime>("Updated")
                    .HasColumnType("timestamp without time zone");

                b.HasKey("Id");

                b.ToTable("Examples");
            });

            modelBuilder.Entity("GdscBackend.Models.FaqModel", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("text");

                b.Property<string>("Answer")
                    .HasColumnType("text");

                b.Property<DateTime>("Created")
                    .HasColumnType("timestamp without time zone");

                b.Property<string>("Question")
                    .HasColumnType("text");

                b.Property<DateTime>("Updated")
                    .HasColumnType("timestamp without time zone");

                b.HasKey("Id");

                b.ToTable("Faqs");
            });

            modelBuilder.Entity("GdscBackend.Models.FileModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                b.Property<DateTime>("Created")
                    .HasColumnType("timestamp without time zone");

                b.Property<string>("Extension")
                    .HasColumnType("text");

                b.Property<string>("Name")
                    .HasColumnType("text");

                b.Property<string>("Path")
                    .HasColumnType("text");

                b.Property<long>("Size")
                    .HasColumnType("bigint");

                b.Property<DateTime>("Updated")
                    .HasColumnType("timestamp without time zone");

                b.HasKey("Id");

                b.ToTable("Files");
            });

            modelBuilder.Entity("GdscBackend.Models.IdeaModel", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("text");

                b.Property<string>("Branch")
                    .HasColumnType("text");

                b.Property<DateTime>("Created")
                    .HasColumnType("timestamp without time zone");

                b.Property<string>("Description")
                    .HasColumnType("text");

                b.Property<string>("Email")
                    .HasColumnType("text");

                b.Property<string>("Name")
                    .HasColumnType("text");

                b.Property<DateTime>("Updated")
                    .HasColumnType("timestamp without time zone");

                b.Property<int>("Year")
                    .HasColumnType("integer");

                b.HasKey("Id");

                b.ToTable("Ideas");
            });

            modelBuilder.Entity("GdscBackend.Models.MemberModel", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("text");

                b.Property<DateTime>("Created")
                    .HasColumnType("timestamp without time zone");

                b.Property<string>("Email")
                    .HasColumnType("text");

                b.Property<string>("Name")
                    .HasColumnType("text");

                b.Property<string>("TeamId")
                    .HasColumnType("text");

                b.Property<DateTime>("Updated")
                    .HasColumnType("timestamp without time zone");

                b.HasKey("Id");

                b.ToTable("Members");
            });

            modelBuilder.Entity("GdscBackend.Models.MenuItemModel", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("text");

                b.Property<DateTime>("Created")
                    .HasColumnType("timestamp without time zone");

                b.Property<string>("Link")
                    .HasColumnType("text");

                b.Property<string>("Name")
                    .HasColumnType("text");

                b.Property<int>("Type")
                    .HasColumnType("integer");

                b.Property<DateTime>("Updated")
                    .HasColumnType("timestamp without time zone");

                b.HasKey("Id");

                b.ToTable("MenuItems");
            });

            modelBuilder.Entity("GdscBackend.Models.PageModel", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("text");

                b.Property<string>("Body")
                    .HasColumnType("text");

                b.Property<DateTime>("Created")
                    .HasColumnType("timestamp without time zone");

                b.Property<string>("Image")
                    .HasColumnType("text");

                b.Property<string>("ShortDescription")
                    .HasColumnType("text");

                b.Property<string>("Slug")
                    .HasColumnType("text");

                b.Property<string>("Title")
                    .HasColumnType("text");

                b.Property<DateTime>("Updated")
                    .HasColumnType("timestamp without time zone");

                b.Property<bool>("isPublished")
                    .HasColumnType("boolean");

                b.HasKey("Id");

                b.ToTable("Pages");
            });

            modelBuilder.Entity("GdscBackend.Models.SettingModel", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("text");

                b.Property<DateTime>("Created")
                    .HasColumnType("timestamp without time zone");

                b.Property<string>("Image")
                    .HasColumnType("text");

                b.Property<string>("Name")
                    .HasColumnType("text");

                b.Property<string>("Slug")
                    .HasColumnType("text");

                b.Property<int>("Type")
                    .HasColumnType("integer");

                b.Property<DateTime>("Updated")
                    .HasColumnType("timestamp without time zone");

                b.Property<bool>("Value")
                    .HasColumnType("boolean");

                b.HasKey("Id");

                b.ToTable("Settings");
            });

            modelBuilder.Entity("GdscBackend.Models.TeamModel", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("text");

                b.Property<DateTime>("Created")
                    .HasColumnType("timestamp without time zone");

                b.Property<string>("Name")
                    .HasColumnType("text");

                b.Property<DateTime>("Updated")
                    .HasColumnType("timestamp without time zone");

                b.HasKey("Id");

                b.ToTable("Teams");
            });

            modelBuilder.Entity("GdscBackend.Models.TechnologyModel", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("text");

                b.Property<DateTime>("Created")
                    .HasColumnType("timestamp without time zone");

                b.Property<string>("Description")
                    .HasColumnType("text");

                b.Property<string>("Icon")
                    .HasColumnType("text");

                b.Property<string>("Name")
                    .HasColumnType("text");

                b.Property<DateTime>("Updated")
                    .HasColumnType("timestamp without time zone");

                b.HasKey("Id");

                b.ToTable("Technologies");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<string>("ClaimType")
                    .HasColumnType("text");

                b.Property<string>("ClaimValue")
                    .HasColumnType("text");

                b.Property<string>("RoleId")
                    .IsRequired()
                    .HasColumnType("text");

                b.HasKey("Id");

                b.HasIndex("RoleId");

                b.ToTable("AspNetRoleClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<string>("ClaimType")
                    .HasColumnType("text");

                b.Property<string>("ClaimValue")
                    .HasColumnType("text");

                b.Property<string>("UserId")
                    .IsRequired()
                    .HasColumnType("text");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
            {
                b.Property<string>("LoginProvider")
                    .HasColumnType("text");

                b.Property<string>("ProviderKey")
                    .HasColumnType("text");

                b.Property<string>("ProviderDisplayName")
                    .HasColumnType("text");

                b.Property<string>("UserId")
                    .IsRequired()
                    .HasColumnType("text");

                b.HasKey("LoginProvider", "ProviderKey");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserLogins");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
            {
                b.Property<string>("UserId")
                    .HasColumnType("text");

                b.Property<string>("RoleId")
                    .HasColumnType("text");

                b.HasKey("UserId", "RoleId");

                b.HasIndex("RoleId");

                b.ToTable("AspNetUserRoles");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
            {
                b.Property<string>("UserId")
                    .HasColumnType("text");

                b.Property<string>("LoginProvider")
                    .HasColumnType("text");

                b.Property<string>("Name")
                    .HasColumnType("text");

                b.Property<string>("Value")
                    .HasColumnType("text");

                b.HasKey("UserId", "LoginProvider", "Name");

                b.ToTable("AspNetUserTokens");
            });

            modelBuilder.Entity("GdscBackend.Models.EventModel", b =>
                {
                    b.HasOne("GdscBackend.Models.FileModel", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                b.HasOne("GdscBackend.Auth.Role", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
            {
                b.HasOne("GdscBackend.Auth.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
            {
                b.HasOne("GdscBackend.Auth.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
            {
                b.HasOne("GdscBackend.Auth.Role", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("GdscBackend.Auth.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
            {
                b.HasOne("GdscBackend.Auth.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });
#pragma warning restore 612, 618
        }
    }
}